<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>jquery mvvm</title>
</head>

<body>
    <h1></h1>
    <input />
    <input />
    <input />
    <p></p>
    <button>Click</button>
    <ul>
        <li>
            <span>{{txt}}</span>
            <span data-binding="property:text;path:val"></span>
            <input data-binding="property:value;path:val" />
            <button data-binding="property:command;path:^remove;parameter:{{id}}">remove</button>
        </li>
    </ul>
    <input id="cbx" type="checkbox" />
    <span></span>
    <input id="inp-t1" value="test" />
    <input id="inp-t2" value="test" />

    <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
    <script type="text/javascript" src="../dist/full/jquery.binding.js"></script>
    <script type="text/javascript">
        Binding.registerConverter("boolToCheckConverter", function(value) {
            return value ? "Aktiv" : "Nicht aktiv";
        });
        Binding.registerConverter("boolToColorConverter", function(value) {
            return value ? "green" : "red";
        });

        $(function() {

            var viewmodel = new Binding.NotifyPropertyChanged({
                title: "Hello World",
                boolTest: true,
                boolNotTest: false,
                list: new Binding.ObservableCollection(
                    [
                        new Binding.NotifyPropertyChanged({
                            id: Math.random(),
                            txt: "First",
                            val: 1
                        }),
                        new Binding.NotifyPropertyChanged({
                            id: Math.random(),
                            txt: "Second",
                            val: 2
                        }),
                        new Binding.NotifyPropertyChanged({
                            id: Math.random(),
                            txt: "Third",
                            val: 3
                        })
                    ]
                ),
                addListItem: function() {
                    this.list.add(new Binding.NotifyPropertyChanged({
                        id: Math.random(),
                        txt: "New",
                        val: 0
                    }));
                },
                remove: function(id) {
                    var item = this;
                    var parsedId = parseFloat(id);
                    var idx = -1;
                    $.each(viewmodel.list.all(), function(i, e) {
                        if (e.id == parsedId) idx = i;
                    });
                    viewmodel.list.remove(idx);
                }
            });

            viewmodel.PropertyChanged.on(function(args) {
                switch (args.property) {
                    case "boolTest":
                        viewmodel.boolNotTest = !args.value;
                        break;
                }
            });

            $("body>h1").binding(viewmodel, {
                property: "text",
                path: "title",
                mode: "get"
            });

            $("body>input:nth-child(1)").binding(viewmodel, {
                property: "value",
                path: "title"
            });
            $("body>input:nth-child(2)").binding(viewmodel, {
                property: "value",
                path: "title",
                mode: "get"
            });
            $("body>input:nth-child(3)").binding(viewmodel, {
                property: "value",
                path: "title",
                mode: "set"
            });
            $("body>p").binding(viewmodel, {
                property: "text",
                path: "title"
            });
            $("body>button").binding(viewmodel, {
                property: "command",
                path: "addListItem"
            });
            $("body>ul").binding(viewmodel, {
                property: "items",
                path: "list"
            });
            $("#cbx").binding(viewmodel, {
                property: "checked",
                path: "boolTest"
            });
            $("body>span").binding(viewmodel, {
                property: "text",
                path: "boolTest",
                converter: "boolToCheckConverter"
            });
            $("body>span").binding(viewmodel, {
                property: "style.color",
                path: "boolTest",
                converter: "boolToColorConverter"
            });
            $("#inp-t1").binding(viewmodel, {
                property: "enabled",
                path: "boolNotTest"
            });
            $("#inp-t2").binding(viewmodel, {
                property: "visibility",
                path: "boolTest"
            });
        });
    </script>
</body>

</html>